version: "3"

vars:
  GIT_TAG:
    sh: git tag --points-at HEAD
  GIT_COMMIT:
    sh: git rev-parse --short HEAD
  GIT_DIRTY:
    sh: git status -s
  VERSION:
    sh: if test "{{.GIT_DIRTY}}" != ""; then echo "{{.GIT_COMMIT}}-dirty"; elif test "{{.GIT_TAG}}" != ""; then echo "{{.GIT_TAG}}"; else echo "{{.GIT_COMMIT}}"; fi

tasks:
  check:
    cmds:
      - trunk check -a
  pre-commit:
    cmds:
      - trunk check --ci
  tidy:
    desc: Run "go mod tidy -go=1.8" in all packages
    cmds:
      - find . -name 'go.mod' -print0 | xargs -0 -I {} /bin/bash -c 'pushd `dirname $1`; go mod tidy -go=1.18; popd' '_' '{}' \+
  update:
    desc: Run "go get -u ./..." in all packages
    cmds:
      - find . -name 'go.mod' -print0 | xargs -0 -I {} /bin/bash -c 'pushd `dirname $1`; go get -u ./...; popd' '_' '{}' \+
  test:
    desc: Run "go test ./..." in all packages
    cmds:
      - find . -name 'go.mod' -print0 | xargs -0 -I {} /bin/bash -c 'pushd `dirname $1`; go test ./...; popd' '_' '{}' \+
  release:
    desc: "Release plugins that have changed it requires to be in a git repo with a clean tag, usage example: task release -- v5.0.13 v5.0.14"
    cmds:
      - |-
        for pkg in $(./scripts/find_changed.sh {{.CLI_ARGS}}); do 
          hub release create -m "${pkg}/{{.GIT_TAG}}" "${pkg}/{{.GIT_TAG}}"; 
        done
    preconditions:
      - test -n "{{.CLI_ARGS}}"
      - test "{{.GIT_TAG}}" = "{{.VERSION}}"
